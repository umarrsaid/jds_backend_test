openapi: 3.0.0
info:
  title: JDS-Backend-Test
  version: 1.0.0
servers:
  - url: http://localhost:3000
  - url: http://localhost:3001
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    RegisterRequest:
      type: object
      properties:
        nik:
          type: integer
          example: 3217781902980008
        role:
          type: string
          description: Role of the user (e.g., superadmin, admin, user)
          example: admin
    LoginRequest:
      type: object
      properties:
        nik:
          type: integer
          example: 3217781902980007
        password:
          type: string
          example: Dlt4JX
    ProductQuery:
      type: object
      properties:
        per_page:
          type: integer
          example: 1
        page:
          type: integer
          example: 400
    ProductResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        department:
          type: string
        price_usd:
          type: number
        price_idr:
          type: number
        createdAt:
          type: string
          format: date-time
    AggregationResponse:
      type: object
      properties:
        department:
          type: string
        products:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              price_idr:
                type: number
      required:
        - department
        - products
  responses:
    SuccessResponse:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Success
              data:
                type: object
                example: {}
    InvalidTokenResponse:
      description: Invalid token response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid JWT Token"
tags:
  - name: Auth
    description: Endpoints related to authentication.
  - name: Product
    description: Endpoints related to product operations.
paths:
  /api/v1/register:
    post:
      tags:
        - Auth
      summary: Register
      description: Create a user with NIK, role, and a generated password (6 characters). Returns the created user with the generated password.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
  /api/v1/login:
    post:
      tags:
        - Auth
      summary: Login
      description: Logs in a user with NIK and password. Returns user ID, NIK, role, and a JWT access token.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
  /api/v1/private-claim:
    get:
      tags:
        - Auth
      summary: Private Claim
      description: Displays private claim data if the JWT is valid.
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '401':
          $ref: '#/components/responses/InvalidTokenResponse'
  /api/v1/product/:
    get:
      tags:
        - Product
      summary: Get Product
      description: Fetches product data from an external resource. Requires a valid token. Adds a new field `price_idr` by converting `price_usd` to IDR using a currency converter.
      security:
        - bearerAuth: []
      parameters:
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 400
      responses:
        '200':
          description: Successful response with product data.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
        '401':
          $ref: '#/components/responses/InvalidTokenResponse'
  /api/v1/product/aggregation:
    get:
      tags:
        - Product
      summary: Get Product Aggregation
      description: Fetches aggregated product data by department, product, and price (in IDR). Requires a valid token and `admin` role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Aggregated product data.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AggregationResponse'
        '401':
          $ref: '#/components/responses/InvalidTokenResponse'
  /api/v1/product/private-claim:
    get:
      tags:
        - Product
      summary: Private Claim
      description: Displays private claim data if the JWT is valid.
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '401':
          $ref: '#/components/responses/InvalidTokenResponse'
